"use strict";(globalThis.webpackChunk_lyrasearch_docs=globalThis.webpackChunk_lyrasearch_docs||[]).push([[1199],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(r),m=a,u=h["".concat(l,".").concat(m)]||h[m]||d[m]||i;return r?n.createElement(u,o(o({ref:t},c),{},{components:r})):n.createElement(u,o({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},995:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},o="Search",s={unversionedId:"usage/search",id:"version-v0.3.1/usage/search",title:"Search",description:"With the current version of Lyra, only type string properties are searchable,",source:"@site/versioned_docs/version-v0.3.1/02-usage/03-search.md",sourceDirName:"02-usage",slug:"/usage/search",permalink:"/v0.3.1/usage/search",draft:!1,editUrl:"https://github.com/lyrasearch/docs/tree/main/versioned_docs/version-v0.3.1/02-usage/03-search.md",tags:[],version:"v0.3.1",sidebarPosition:3,frontMatter:{},sidebar:"main",previous:{title:"Insert data",permalink:"/v0.3.1/usage/insert-data"},next:{title:"Delete data",permalink:"/v0.3.1/usage/delete-data"}},l={},p=[{value:"Search",id:"search-1",level:2},{value:"Filters",id:"filters",level:2},{value:"Search term",id:"search-term",level:3},{value:"Search properties",id:"search-properties",level:3},{value:"Exact match",id:"exact-match",level:3},{value:"Typo tolerance",id:"typo-tolerance",level:3},{value:"Results limits",id:"results-limits",level:3},{value:"Results offset",id:"results-offset",level:3},{value:'What does the <code>search</code> method return?\u200b <a href="#what-does-the-search-method-return" id="what-does-the-search-method-return"></a>',id:"what-does-the-search-method-return-",level:2}],c={toc:p};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"search"},"Search"),(0,a.kt)("p",null,"With the current version of Lyra, only type ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," properties are searchable,\nhowever, this does not prevent the addition of different types of properties.\nLyra will keep them in memory and send the entire document back whenever there's\na match for a query on searchable properties."),(0,a.kt)("h2",{id:"search-1"},"Search"),(0,a.kt)("p",null,"Let's say we have a database that contains some elements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { create, insert, search } from "@lyrasearch/lyra";\n\nconst movieDB = create({\n  schema: {\n    title: "string",\n    director: "string",\n    plot: "string",\n    year: "number",\n    isFavorite: "boolean",\n  },\n});\n\ninsert(movieDB, {\n  title: "The prestige",\n  director: "Christopher Nolan",\n  plot:\n    "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",\n  year: 2006,\n  isFavorite: true,\n});\n\ninsert(movieDB, {\n  title: "Big Fish",\n  director: "Tim Burton",\n  plot:\n    "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",\n  year: 2004,\n  isFavorite: true,\n});\n\ninsert(movieDB, {\n  title: "Harry Potter and the Philosopher\'s Stone",\n  director: "Chris Columbus",\n  plot:\n    "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",\n  year: 2001,\n  isFavorite: false,\n});\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Notice that we are also importing the ",(0,a.kt)("inlineCode",{parentName:"p"},"search")," method")),(0,a.kt)("p",null,"We can now search for one (or multiple) documents as easily as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Harry",\n  properties: "*",\n});\n')),(0,a.kt)("h2",{id:"filters"},"Filters"),(0,a.kt)("p",null,"The object that defines our query, in this case\n",(0,a.kt)("inlineCode",{parentName:"p"},"{term: 'Harry', properties: '*'}"),", can be shaped, by setting additional\nproperties (filters), to ",(0,a.kt)("strong",{parentName:"p"},'"tighten"')," or ",(0,a.kt)("strong",{parentName:"p"},'"loosen"')," our query."),(0,a.kt)("h3",{id:"search-term"},"Search term"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"term")," property specifies the ",(0,a.kt)("inlineCode",{parentName:"p"},"word")," to be searched."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Chris",\n});\n')),(0,a.kt)("p",null,"We are now searching for all the documents that contain the word ",(0,a.kt)("inlineCode",{parentName:"p"},"Chris"),"."),(0,a.kt)("h3",{id:"search-properties"},"Search properties"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"properties")," property defines in which property to run our query."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Chris",\n  properties: ["director"],\n});\n')),(0,a.kt)("p",null,"We are now searching for all the documents that contain the word ",(0,a.kt)("inlineCode",{parentName:"p"},"Chris")," in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"director")," property."),(0,a.kt)("p",null,"We can also search through nested properties:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Chris",\n  properties: ["cast.director"],\n});\n')),(0,a.kt)("p",null,"By default, Lyra searches in ",(0,a.kt)("strong",{parentName:"p"},"all")," searchable properties."),(0,a.kt)("h3",{id:"exact-match"},"Exact match"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"exact")," property finds all the document with an exact match of the ",(0,a.kt)("inlineCode",{parentName:"p"},"term"),"\nproperty."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Chris",\n  properties: ["director"],\n  exact: true,\n});\n')),(0,a.kt)("p",null,"We are now searching for all the documents that contain ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"exactly"))," the word\n",(0,a.kt)("inlineCode",{parentName:"p"},"Chris")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"director")," property."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Without the ",(0,a.kt)("inlineCode",{parentName:"p"},"exact")," property, for example, the term ",(0,a.kt)("inlineCode",{parentName:"p"},"Christopher Nolan")," would\nbe returned as well, as it contains the word ",(0,a.kt)("inlineCode",{parentName:"p"},"Chris"),".")),(0,a.kt)("h3",{id:"typo-tolerance"},"Typo tolerance"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tolerance")," property allows specifying the maximum distance (following the\nLevenshtein algorithm) between the term and the searchable property."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"The Levenshtein distance is a string metric for measuring the difference\nbetween two sequences. Informally, the Levenshtein distance between two words\nis the minimum number of single-character edits (insertions, deletions or\nsubstitutions) required to change one word into the other."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Cris",\n  properties: ["director"],\n  tolerance: 1,\n});\n')),(0,a.kt)("p",null,"We are searching for all the documents that contain a term with an edit distance\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"Chris"),") in the ",(0,a.kt)("inlineCode",{parentName:"p"},"director")," property."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Tolerance")," doesn't work together with the ",(0,a.kt)("inlineCode",{parentName:"p"},"exact")," parameter. ",(0,a.kt)("inlineCode",{parentName:"p"},"Exact"),"\nwill have priority.")),(0,a.kt)("h3",{id:"results-limits"},"Results limits"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"limit")," property limits the result at the specified number."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Chris",\n  properties: ["director"],\n  limit: 1,\n});\n')),(0,a.kt)("p",null,"We are searching for the ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," document that contains the term ",(0,a.kt)("inlineCode",{parentName:"p"},"Chris")," in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"director")," property."),(0,a.kt)("h3",{id:"results-offset"},"Results offset"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"offset")," property skips the first ",(0,a.kt)("inlineCode",{parentName:"p"},"X")," results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Chris",\n  properties: ["director"],\n  offset: 1,\n});\n')),(0,a.kt)("p",null,"We are searching for all the documents that contains the term ",(0,a.kt)("inlineCode",{parentName:"p"},"Chris")," in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"director")," property, but returning the document at offset ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"By default, Lyra limits the search results to ",(0,a.kt)("inlineCode",{parentName:"p"},"10"),", without any offset\n(so, ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," as offset value).")),(0,a.kt)("h2",{id:"what-does-the-search-method-return-"},"What does the ",(0,a.kt)("inlineCode",{parentName:"h2"},"search")," method return?",(0,a.kt)("a",{parentName:"h2",href:"https://docs.lyrasearch.io/usage/search-data#what-does-the-search-method-return"},"\u200b")," ",(0,a.kt)("a",{href:"#what-does-the-search-method-return",id:"what-does-the-search-method-return"})),(0,a.kt)("p",null,"Now that we have learned how to perform ",(0,a.kt)("strong",{parentName:"p"},"searches")," on a Lyra database, we can\nbriefly analyze the response that Lyra gives us back."),(0,a.kt)("p",null,"Let's say we have run the following query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const searchResult = search(movieDB, {\n  term: "Cris",\n  properties: ["director"],\n  tolerance: 1,\n});\n')),(0,a.kt)("p",null,"Whether the document was found or not, Lyra gives back an ",(0,a.kt)("inlineCode",{parentName:"p"},"object")," with the\nfollowing properties:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  elapsed: 181208n,\n  count: 2,\n  hits: [\n    {\n      id: '37149225-243',\n      score: 0.23856062735983122,\n      document: {\n        title: \"Harry Potter and the Philosopher's Stone\",\n        director: 'Chris Columbus',\n        plot: 'Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.',\n        year: 2001,\n        isFavorite: false\n      }\n    },\n    {\n      id: '37149225-5',\n      score: 0.21267890323564321,\n      document: {\n        title: 'The prestige',\n        director: 'Christopher Nolan',\n        plot: 'Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.',\n        year: 2006,\n        isFavorite: true\n      }\n    }\n  ]\n}\n")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"elapsed")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"BigInt")),(0,a.kt)("td",{parentName:"tr",align:null},"Time taken to execute the query.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"hits")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"object")),(0,a.kt)("td",{parentName:"tr",align:null},"Array of results containing result score (from ",(0,a.kt)("inlineCode",{parentName:"td"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"td"},"1")," based on relevance), Lyra's ID, and original document.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"count")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Number of total results.")))))}h.isMDXComponent=!0}}]);