"use strict";(globalThis.webpackChunk_lyrasearch_docs=globalThis.webpackChunk_lyrasearch_docs||[]).push([[5009],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5783:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_label:"Async methods",sidebar_position:3},i="Async methods",s={unversionedId:"migration-guide/async-methods",id:"migration-guide/async-methods",title:"Async methods",description:"With v0.3.1 and below, Lyra methods were synchronous. This meant that you could use them like this:",source:"@site/docs/02-migration-guide/03-async-methods.md",sourceDirName:"02-migration-guide",slug:"/migration-guide/async-methods",permalink:"/migration-guide/async-methods",draft:!1,editUrl:"https://github.com/lyrasearch/docs/tree/main/docs/02-migration-guide/03-async-methods.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Async methods",sidebar_position:3},sidebar:"main",previous:{title:"How to upgrade",permalink:"/migration-guide/how-to-upgrade"},next:{title:"CommonJS imports",permalink:"/migration-guide/commonjs"}},l={},c=[],u={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"async-methods"},"Async methods"),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.3.1")," and below, Lyra methods were synchronous. This meant that you could use them like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { create, insert, search } from "@lyrasearch/lyra";\nconst db = create({\n  schema: {\n    quote: "string",\n    author: "string",\n  }\n});\ninsert(db, {\n  quote: "I feel as if I\'m always on the verge of waking up",\n  author: "Fernando Pessoa"\n});\nconst results = search(db, {\n  term: "waking up"\n});\n')),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.4.0"),", Lyra methods are now asynchronous. This means that you'll need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," when calling them:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { create, insert, search } from "@lyrasearch/lyra";\nconst db = await create({\n  schema: {\n    quote: "string",\n    author: "string",\n  }\n});\nawait insert(db, {\n  quote: "I feel as if I\'m always on the verge of waking up",\n  author: "Fernando Pessoa"\n});\nconst results = await search(db, {\n  term: "waking up"\n});\n')),(0,a.kt)("p",null,"If you're using Lyra in a browser, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," attribute on your script tag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module" async>\n  import { create, insert, search } from "@lyrasearch/lyra";\n  const db = await create({\n    schema: {\n      quote: "string",\n      author: "string",\n    }\n  });\n  // ...\n<\/script>\n')),(0,a.kt)("p",null,"The synchronous methods now moved to async are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"create")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"insert")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"search")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"remove")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"load")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"save"))))}m.isMDXComponent=!0}}]);