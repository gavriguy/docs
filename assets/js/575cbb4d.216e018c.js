"use strict";(globalThis.webpackChunk_lyrasearch_docs=globalThis.webpackChunk_lyrasearch_docs||[]).push([[9744],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),g=a,h=c["".concat(l,".").concat(g)]||c[g]||d[g]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1713:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={description:"The plugin-astro plugin allows you to index the content of your Astro websites and offer text search to your visitors."},o="Astro plugin",s={unversionedId:"plugins/astro-plugin",id:"version-v0.3.1/plugins/astro-plugin",title:"Astro plugin",description:"The plugin-astro plugin allows you to index the content of your Astro websites and offer text search to your visitors.",source:"@site/versioned_docs/version-v0.3.1/03-plugins/04-astro-plugin.md",sourceDirName:"03-plugins",slug:"/plugins/astro-plugin",permalink:"/v0.3.1/plugins/astro-plugin",draft:!1,editUrl:"https://github.com/lyrasearch/docs/tree/main/versioned_docs/version-v0.3.1/03-plugins/04-astro-plugin.md",tags:[],version:"v0.3.1",sidebarPosition:4,frontMatter:{description:"The plugin-astro plugin allows you to index the content of your Astro websites and offer text search to your visitors."},sidebar:"main",previous:{title:"Match highlight plugin",permalink:"/v0.3.1/plugins/match-highlight-plugin"},next:{title:"Docusaurus Plugin",permalink:"/v0.3.1/plugins/docusaurus-plugin"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:'Loading the DB on client-side\u200b <a href="#loading-the-db-on-client-side" id="loading-the-db-on-client-side"></a>',id:"loading-the-db-on-client-side-",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"astro-plugin"},"Astro plugin"),(0,a.kt)("h3",{className:"plugin-description"},i.description),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can install the plugin using any major Node.js/Bun package manager:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Using npm"',title:'"Using','npm"':!0},"npm install --save @lyrasearch/plugin-astro\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Using yarn"',title:'"Using','yarn"':!0},"yarn add @lyrasearch/plugin-astro\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Using pnpm"',title:'"Using','pnpm"':!0},"pnpm add @lyrasearch/plugin-astro\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"There are two main aspects to consider when using this plugin:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DB generation"),(0,a.kt)("li",{parentName:"ul"},"Loading DBs & performing searches")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// In `astro.config.mjs`\nimport lyra from "@lyrasearch/plugin-astro";\n\n// https://astro.build/config\nexport default defineConfig({\n  integrations: [\n    lyra({\n      // We can generate more than one DB, with different configurations\n      mydb: {\n        // Required. Only pages matching this path regex will be indexed\n        pathMatcher: /blog\\/[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}\\/.+$/,\n\n        // Optional. \'english\' by default\n        language: "spanish",\n\n        // Optional. [\'body\'] by default. Use it to constraint what is used to\n        // index a page.\n        contentSelectors: ["h1", "main"],\n      },\n    }),\n  ],\n});\n')),(0,a.kt)("p",null,"When running the ",(0,a.kt)("inlineCode",{parentName:"p"},"astro build")," command, a new DB file will be persisted in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/assets")," directory. For the particular case of this example, it will be saved in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/assets/lyraDB_mydb.json"),"."),(0,a.kt)("h2",{id:"loading-the-db-on-client-side-"},"Loading the DB on client-side",(0,a.kt)("a",{parentName:"h2",href:"https://docs.lyrasearch.io/plugins/plugin-astro#loading-the-db-on-client-side"},"\u200b")," ",(0,a.kt)("a",{href:"#loading-the-db-on-client-side",id:"loading-the-db-on-client-side"})),(0,a.kt)("p",null,"To use the generated DBs in your pages, you can include a script in your ",(0,a.kt)("inlineCode",{parentName:"p"},"<head>")," section, as the following one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<head>\n  \x3c!-- Other stuff --\x3e\n  <script>\n    // Astro will do the job of bundling everything for you\n    import { getLyraDB, search } from \"@lyrasearch/plugin-astro/clientside\"\n\n    // We load the DB that we generated at build time, this is an asynchronous\n    // operation, so we must either await, or rely on `.then` calls.\n    const db = await getLyraDB('mydb')\n\n    // Now we can search inside our DB. Of course, feel free to use it in more\n    // interesting ways.\n    console.log('Search Results')\n    console.log(await search(db, { term: 'mySearchTerm' }))\n  <\/script>\n</head>\n")),(0,a.kt)("p",null,"For now, the plugin only expose load & search functionality on the client side, but we might expose other Lyra features as soon as we stabilise some internal details and public APIs."))}c.isMDXComponent=!0}}]);