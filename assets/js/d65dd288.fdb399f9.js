"use strict";(globalThis.webpackChunk_lyrasearch_docs=globalThis.webpackChunk_lyrasearch_docs||[]).push([[9207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o="Insert data",s={unversionedId:"usage/insert-data",id:"version-v0.3.1/usage/insert-data",title:"Insert data",description:"Whenever we create a database with Lyra, we must specify a schema, which",source:"@site/versioned_docs/version-v0.3.1/02-usage/02-insert-data.md",sourceDirName:"02-usage",slug:"/usage/insert-data",permalink:"/v0.3.1/usage/insert-data",draft:!1,editUrl:"https://github.com/lyrasearch/docs/tree/main/versioned_docs/version-v0.3.1/02-usage/02-insert-data.md",tags:[],version:"v0.3.1",sidebarPosition:2,frontMatter:{},sidebar:"main",previous:{title:"Create a new Lyra instance",permalink:"/v0.3.1/usage/create-a-new-lyra-instance"},next:{title:"Search",permalink:"/v0.3.1/usage/search"}},l={},c=[{value:"Insert",id:"insert",level:2},{value:"Batch insertion\u200b",id:"batch-insertion",level:2},{value:"Unsearchable fields",id:"unsearchable-fields",level:2}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"insert-data"},"Insert data"),(0,a.kt)("p",null,"Whenever we create a database with Lyra, we must specify a ",(0,a.kt)("inlineCode",{parentName:"p"},"schema"),", which\nrepresents the entry we are going to insert."),(0,a.kt)("p",null,"Let's say our database and schema look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { create, insert } from "@lyrasearch/lyra";\n\nconst movieDB = create({\n  schema: {\n    title: "string",\n    director: "string",\n    plot: "string",\n    year: "number",\n    isFavorite: "boolean",\n  },\n});\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Notice that we are now also importing the ",(0,a.kt)("inlineCode",{parentName:"p"},"insert")," method to do our\ninsertions.")),(0,a.kt)("h2",{id:"insert"},"Insert"),(0,a.kt)("p",null,"Data insertion in Lyra is quick and intuitive:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const { id: thePrestige } = insert(movieDB, {\n  title: "The prestige",\n  director: "Christopher Nolan",\n  plot:\n    "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",\n  year: 2006,\n  isFavorite: true,\n});\n\nconst { id: bigFish } = insert(movieDB, {\n  title: "Big Fish",\n  director: "Tim Burton",\n  plot:\n    "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",\n  year: 2004,\n  isFavorite: true,\n});\n\nconst { id: harryPotter } = insert(movieDB, {\n  title: "Harry Potter and the Philosopher\'s Stone",\n  director: "Chris Columbus",\n  plot:\n    "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",\n  year: 2001,\n  isFavorite: false,\n});\n')),(0,a.kt)("h2",{id:"batch-insertion"},"Batch insertion",(0,a.kt)("a",{parentName:"h2",href:"https://docs.lyrasearch.io/usage/insert-data#batch-insertion"},"\u200b")),(0,a.kt)("p",null,"Most of the ",(0,a.kt)("inlineCode",{parentName:"p"},"insert")," function internals are synchronous, so inserting a large\nnumber of documents in a loop could potentially block the event loop. If you\nhave a lot of records, we suggest using the ",(0,a.kt)("inlineCode",{parentName:"p"},"batchInsert")," function."),(0,a.kt)("p",null,"You can pass a third, optional, parameter to change the batch size (default:\n",(0,a.kt)("inlineCode",{parentName:"p"},"1000"),"). We recommend keeping this number as low as possible to avoid blocking\nthe event loop. The ",(0,a.kt)("inlineCode",{parentName:"p"},"batchSize")," refers to the maximum number of ",(0,a.kt)("inlineCode",{parentName:"p"},"insert"),"\noperations to perform before yielding the event loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const docs = [\n  {\n    title: "The prestige",\n    director: "Christopher Nolan",\n    plot:\n      "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",\n    year: 2006,\n    isFavorite: true,\n  },\n  {\n    title: "Big Fish",\n    director: "Tim Burton",\n    plot:\n      "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",\n    year: 2004,\n    isFavorite: true,\n  },\n  {\n    title: "Harry Potter and the Philosopher\'s Stone",\n    director: "Chris Columbus",\n    plot:\n      "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",\n    year: 2001,\n    isFavorite: false,\n  },\n];\n\nawait insertBatch(movieDB, docs, { batchSize: 500 });\n')),(0,a.kt)("h2",{id:"unsearchable-fields"},"Unsearchable fields"),(0,a.kt)("p",null,"When working on large datasets, it is common to have documents with a large\nnumber of properties, and maybe some of them are not even relevant for any\nsearch purpose."),(0,a.kt)("p",null,"Also, consider that currently Lyra, including ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.3.0"),", only performs search\noperations on strings."),(0,a.kt)("p",null,"With that being said, let's consider the following schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { create } from "@lyrasearch/lyra";\n\nconst db = create({\n  schema: {\n    author: "string",\n    quote: "string",\n    favorite: "boolean", // <-- unsearchable\n    tags: "string[]", // <-- unsupported type!\n  },\n});\n')),(0,a.kt)("p",null,"Why does Lyra need to know that a given property is of a certain type if is not\nsearchable?"),(0,a.kt)("p",null,"The main reason for Lyra to know types is because we're experimenting with the\npossibility of performing filtering operations depending on booleans, numbers,\netc."),(0,a.kt)("p",null,"Starting from ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.3.0"),", it is no longer be necessary to list any non-searchable\nproperty as part of the Lyra schema."),(0,a.kt)("p",null,"In fact, it is possible to rewrite the schema definition above as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { create } from "@lyrasearch/lyra";\n\nconst db = create({\n  schema: {\n    author: "string",\n    quote: "string",\n  },\n});\n')),(0,a.kt)("p",null,"and still, be able to insert documents like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "author": "Rumi",\n  "quote": "Patience is the key to joy",\n  "isFavorite": true,\n  "tags": ["inspirational", "deep"]\n}\n')),(0,a.kt)("p",null,"or even documents with different shapes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'[\n  {\n    author: "Rumi",\n    quote: "Patience is the key to joy",\n    isFavorite: true,\n    tags: ["inspirational", "deep"],\n  },\n  {\n    author: "Rumi",\n    quote: "Grace comes to forgive and then forgive again",\n    score: 10,\n    link: null,\n  },\n];\n')),(0,a.kt)("p",null,"of course, it will only be possible to perform search operations on ",(0,a.kt)("strong",{parentName:"p"},"known\nproperties"),", in that case, ",(0,a.kt)("inlineCode",{parentName:"p"},"author")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"quote"),", which will always need to be\nof type ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," (as stated during the schema definition)."))}h.isMDXComponent=!0}}]);